= おわりに
ここまで読んでいただき、本当にありがとうございます！

ここまで、UEFIでのベアメタルプログラミングの方法について説明しました。「やればできそうだ」と思ってもらえたら嬉しいです。

UEFIはかしこいです。色々な機能を持っていて、色々な事をやってくれます。仕様書の目次を眺めていると、「こんなこともファームウェア側でやってくれるのか」と驚きます@<fn>{uefi_malloc}。また、ソフトウェアの中で最も下のレイヤー@<fn>{most_low_layer}を扱っているにも関わらず、メモリマップを説明せずに済んでいる事はすごいことです。
//footnote[uefi_malloc][メモリアロケータを持っているのは個人的に驚きでした。]
//footnote[most_low_layer][もちろん、厳密にはより下にファームウェアがありますが。]

"はじめに"でも書きましたが、本書のコンセプトには、「UEFIファームウェアの機能をラップしていくだけでOSっぽいものが作れるんじゃ?」という思いがあります。中でも、ファイルシステムの機能をファームウェアが持っているのは強力です。フルスクラッチでOS自作を始めようと考えている人が居れば、UEFIで始めるのも良いんじゃないかなと思います。

#@# やたらと褒めていますが、高機能になるということは、複雑性が増すということでもあるので、それだけファームウェア側にバグが含まれる確率が上がります。そんなわけで、今のところは特にファームウェアの不具合に悩まされるようなところまで来ていないですが、おそらく色々な事を試そうとする内に、「〜製のファームウェアにはこんなバグがある」といった問題にぶつかりそうな気がしています。そういった意味で、バッドノウハウの共有としても、UEFIのベアメタルプログラミングをやる人が増えてくれたら良いなと思っています。日本語の情報を増やしましょう！

#@# ここまで、まとまりもなく書いてきましたが、最後にバイナリ短歌で締めたいと思います(@<list>{binary_tanka})。ここまで読んでいただき、本当にありがとうございます。

#@# #@# TODO: バイナリ短歌
#@# //listnum[binary_tanka][バイナリ短歌(36バイト。字余り)][c]{
#@# 48 b9 90 95 81 a3 00
#@# 00 00 00
#@# 48 b8 b8 e1 87 a3 00
#@# 00 00 00
#@# 48 8d 14 25 20 10 40
#@# 00
#@# ff d0
#@# eb fe
#@# d6 00 00 00
#@# //}

最後に、バイナリ短歌で終わりたいと思います(コード@<list>{tanka_code}、バイナリ@<list>{tanka_binary})。サンプルコードのディレクトリは"sample_tanka"です。

//listnum[tanka_code]["msg"ラベルのアドレスにある文字列を出力する]{
#define CONOUT_ADDR	0xa3819590
#define OUTPUTSTRING_ADDR	0xa387e1b8

	.text
	.globl		efi_main
efi_main:
	/* OutputString第1引数(ConOut)をRCXへ格納 */
	movq		$CONOUT_ADDR, %rcx
	/* OutputStringのアドレスをRAXへ格納 */
	movq		$OUTPUTSTRING_ADDR, %rax
	/* ".ascii"のアドレスをRDXへ格納 */
	leaq		msg, %rdx
	/* OutputStringを呼び出す */
	callq		*%rax

	/* 無限ループ */
	jmp		.

	.data
msg:
	/* "ABCD" */
	.ascii		"A\0B\0C\0D\0\0\0"
	/* "すごーい" */
	/*.ascii		"Y0T0\3740D0\0\0"*/
	/* ボス */
	/*.ascii		"\326\0\0\0"*/
//}

//listnum[tanka_binary][実行バイナリ逆アセンブル結果(textセクション32バイト、1バイト字余り)]{
0000000000401000 <efi_main>:
  401000:       48 b9 90 95 81 a3 00    movabs $0xa3819590,%rcx
  401007:       00 00 00
  40100a:       48 b8 b8 e1 87 a3 00    movabs $0xa387e1b8,%rax
  401011:       00 00 00
  401014:       48 8d 14 25 00 20 40    lea    0x402000,%rdx
  40101b:       00
  40101c:       ff d0                   callq  *%rax
  40101e:       eb fe                   jmp    40101e <efi_main+0x1e>
//}

ここまで読んでいただき、本当にありがとうございました。
